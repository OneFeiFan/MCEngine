#ifndef EX_FAKE_ACTOR_HPP
#define EX_FAKE_ACTOR_HPP
#include <dlfcn.h>
#include "Fake_ItemStack.hpp"
#include "Fake_ItemStackBase.hpp"

class Vec3;
class AABB;
class ActorLocation;
class Vec2;
class IActorMovementProxy;
class BlockSource;
class BlockPos;
class ActorDamageSource;
class ActorUniqueID;
class InputMode;
class UIProfanityContext;
class MaterialType;
class Player;
class ActorEvent;
class ArmorSlot;
class EquipmentSlot;
class CompoundTag;
class DataLoadHelper;
class ActorLink;
class Dimension;
class AutomaticID;
class ChangeDimensionPacket;
class LevelSoundEvent;
class Attribute;
class MobEffectInstance;
class ItemStackBase;
class ItemUseMethod;
class ActorInteraction;
class Options;
class EquipmentTableDefinition;
class RenderParams;
class ActorDefinitionGroup;
class ActorDefinitionIdentifier;
class Level;
class EntityRefTraits;
class WeakRefT;
class ActorFlags;
class ActionEvent;
class PaletteColor;
class ActorType;
class UpdateEquipPacket;
class MobEffect;
class SynchedActorData;
class VariantParameterList;
class EntityRegistryOwned;
class SetActorMotionPacket;
class SeatDescription;
class AttributeBuffType;
class UpdateTradePacket;
class SimpleContainer;
class MotionPredictionHintsPacket;
class Random;
class ItemActor;
class AddActorPacket;
class MoveActorAbsoluteData;
class ActorRuntimeID;
class ActorCategory;
class Block;

class Actor {
public:
    //Virtual Tables
    virtual ~Actor();
//    virtual void reloadHardcoded(Actor::InitializationMethod, VariantParameterList const&);
//    virtual void reloadHardcodedClient(Actor::InitializationMethod, VariantParameterList const&);
//    virtual void initializeComponents(Actor::InitializationMethod, VariantParameterList const&);
//    virtual void reloadComponents(Actor::InitializationMethod, VariantParameterList const&);
    virtual void _serverInitItemStackIds();
    virtual void _doInitialMove();
    virtual void hasComponent(HashedString const&) const;
    virtual void reset();
    virtual void getOnDeathExperience();
    virtual void getOwnerEntityType();
    virtual void remove();
    virtual void setPos(Vec3 const&);
    virtual void getPredictedMovementValues() const;
    virtual void getPos() const;
    virtual void getPosOld() const;
    virtual void getPosExtrapolated(float) const;
    virtual void getAttachPos(ActorLocation, float) const;
    virtual void getFiringPos() const;
    virtual void setRot(Vec2 const&);
    virtual void move(Vec3 const&);
    virtual void move(IActorMovementProxy&, Vec3 const&) const;
    virtual void getInterpolatedRidingPosition(float) const;
    virtual void getInterpolatedBodyRot(float) const;
    virtual void getInterpolatedHeadRot(float) const;
    virtual void getInterpolatedBodyYaw(float) const;
    virtual void getYawSpeedInDegreesPerSecond() const;
    virtual void getInterpolatedWalkAnimSpeed(float) const;
    virtual void getInterpolatedRidingOffset(float) const;
    virtual void checkBlockCollisions(AABB const&, std::__ndk1::function<void (BlockSource&, Block const&, BlockPos const&, Actor&)>);
    virtual void checkBlockCollisions();
    virtual void isFireImmune() const;
    virtual void breaksFallingBlocks() const;
    virtual void blockedByShield(ActorDamageSource const&, Actor&);
    virtual void teleportTo(Vec3 const&, bool, int, int, ActorUniqueID const&);
    virtual void tryTeleportTo(Vec3 const&, bool, bool, int, int);
    virtual void chorusFruitTeleport(Vec3&);
    virtual void lerpTo(Vec3 const&, Vec2 const&, int);
    virtual void lerpMotion(Vec3 const&);
    virtual void getAddPacket();
    virtual void normalTick();
    virtual void baseTick();
    virtual void rideTick();
    virtual void positionRider(Actor&, float);
    virtual void getRidingHeight();
    virtual void startRiding(Actor&);
    virtual void addRider(Actor&);
    virtual void flagRiderToRemove(Actor&);
    virtual void getExitTip(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, InputMode) const;
    virtual void intersects(Vec3 const&, Vec3 const&) const;
    virtual void isFree(Vec3 const&, float);
    virtual void isFree(Vec3 const&);
    virtual void isInWall() const;
    virtual void isInvisible() const;
    virtual void canShowNameTag() const;
    virtual void canExistInPeaceful() const;
    virtual void setNameTagVisible(bool);
    virtual void getNameTag() const;
    virtual void getNameTagAsHash() const;
    virtual void getFormattedNameTag() const;
    virtual void filterFormattedNameTag(UIProfanityContext const&);
    virtual void setNameTag(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    virtual void getAlwaysShowNameTag() const;
    virtual void setScoreTag(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    virtual void getScoreTag() const;
    virtual void isInWater() const;
    virtual void hasEnteredWater() const;
    virtual void isImmersedInWater() const;
    virtual void isInWaterOrRain() const;
    virtual void isInLava() const;
    virtual void isUnderLiquid(MaterialType) const;
    virtual void isOverWater() const;
    virtual void makeStuckInBlock(Vec3 const&);
    virtual void getCameraOffset() const;
    virtual void getShadowHeightOffs();
    virtual void getShadowRadius() const;
    virtual void getHeadLookVector(float);
    virtual void canSeeInvisible() const;
    virtual void canSee(Actor const&) const;
    virtual void canSee(Vec3 const&) const;
    virtual void isSkyLit(float);
    virtual void getBrightness(float) const;
    virtual void interactPreventDefault();
    virtual void playerTouch(Player&);
    virtual void onAboveBubbleColumn(bool);
    virtual void onInsideBubbleColumn(bool);
    virtual void isImmobile() const;
    virtual void isSilent();
    virtual void isPickable();
    virtual void isFishable() const;
    virtual void isSleeping() const;
    virtual void isShootable();
    virtual void setSneaking(bool);
    virtual void isBlocking() const;
    virtual void isDamageBlocked(ActorDamageSource const&) const;
    virtual void isAlive() const;
    virtual void isOnFire() const;
    virtual void isOnHotBlock() const;
    virtual void isCreativeModeAllowed();
    virtual void isSurfaceMob() const;
    virtual void isTargetable() const;
    virtual void isLocalPlayer() const;
    virtual void isPlayer() const;
    virtual void canAttack(Actor*, bool) const;
    virtual void setTarget(Actor*);
    virtual void findAttackTarget();
    virtual void isValidTarget(Actor*) const;
    virtual void attack(Actor&);
    virtual void performRangedAttack(Actor&, float);
    virtual void adjustDamageAmount(int&) const;
    virtual void getEquipmentCount() const;
    virtual void setOwner(ActorUniqueID);
    virtual void setSitting(bool);
    virtual void onTame();
    virtual void onFailedTame();
    virtual void getInventorySize() const;
    virtual void getEquipSlots() const;
    virtual void getChestSlots() const;
    virtual void setStanding(bool);
    virtual void canPowerJump() const;
    virtual void setCanPowerJump(bool);
    virtual void isJumping() const;
    virtual void isEnchanted() const;
    virtual void rideJumped();
    virtual void rideLanded(Vec3 const&, Vec3 const&);
    virtual void shouldRender() const;
    virtual void isInvulnerableTo(ActorDamageSource const&) const;
    virtual void getBlockDamageCause(Block const&) const;
    virtual void actuallyHurt(int, ActorDamageSource const&, bool);
    virtual void animateHurt();
    virtual void doFireHurt(int);
    virtual void onLightningHit();
    virtual void onBounceStarted(BlockPos const&, Block const&);
    virtual void feed(int);
    virtual void handleEntityEvent(ActorEvent, int);
    virtual void getPickRadius();
    virtual void getActorRendererId() const;
    virtual void spawnAtLocation(int, int);
    virtual void spawnAtLocation(int, int, float);
    virtual void spawnAtLocation(Block const&, int);
    virtual void spawnAtLocation(Block const&, int, float);
    virtual void spawnAtLocation(ItemStack const&, float);
    virtual void despawn();
    virtual void killed(Actor&);
    virtual void awardKillScore(Actor&, int);
    virtual void setArmor(ArmorSlot, ItemStack const&);
    virtual void getArmor(ArmorSlot) const;
    virtual void getArmorMaterialTypeInSlot(ArmorSlot) const;
    virtual void getArmorMaterialTextureTypeInSlot(ArmorSlot) const;
    virtual void getArmorColorInSlot(ArmorSlot, int) const;
    virtual void getEquippedSlot(EquipmentSlot) const;
    virtual void setEquippedSlot(EquipmentSlot, ItemStack const&);
    virtual void getCarriedItem() const;
    virtual void setCarriedItem(ItemStack const&);
    virtual void setOffhandSlot(ItemStack const&);
    virtual void getEquippedTotem() const;
    virtual void consumeTotem();
    virtual void save(CompoundTag&);
    virtual void saveWithoutId(CompoundTag&);
    virtual void load(CompoundTag const&, DataLoadHelper&);
    virtual void loadLinks(CompoundTag const&, std::__ndk1::vector<ActorLink, std::__ndk1::allocator<ActorLink> >&, DataLoadHelper&);
    virtual void getEntityTypeId() const;
    virtual void queryEntityRenderer() const;
    virtual void getSourceUniqueID() const;
    virtual void setOnFire(int);
    virtual void getHandleWaterAABB() const;
    virtual void handleInsidePortal(BlockPos const&);
    virtual void getPortalCooldown() const;
    virtual void getPortalWaitTime() const;
    virtual void getDimensionId() const;
    virtual void canChangeDimensions() const;
    //virtual void changeDimension(AutomaticID<Dimension, int>, bool);
    virtual void changeDimension(ChangeDimensionPacket const&);
    virtual void getControllingPlayer() const;
    virtual void checkFallDamage(float, bool);
    virtual void causeFallDamage(float);
    virtual void handleFallDistanceOnServer(float, bool);
    virtual void playSynchronizedSound(LevelSoundEvent, Vec3 const&, Block const&, bool);
    virtual void playSynchronizedSound(LevelSoundEvent, Vec3 const&, int, bool);
    virtual void onSynchedDataUpdate(int);
    virtual void canAddRider(Actor&) const;
    virtual void canPickupItem(ItemStack const&) const;
    virtual void canBePulledIntoVehicle() const;
    virtual void inCaravan() const;
    virtual void isLeashableType();
    virtual void tickLeash();
    virtual void sendMotionPacketIfNeeded();
    virtual void canSynchronizeNewEntity() const;
    virtual void stopRiding(bool, bool, bool);
    virtual void startSwimming();
    virtual void stopSwimming();
    virtual void buildDebugInfo(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&) const;
    virtual void getCommandPermissionLevel() const;
    virtual void getMutableAttribute(Attribute const&);
    virtual void getAttribute(Attribute const&) const;
    virtual void getDeathTime() const;
    virtual void heal(int);
    virtual void isInvertedHealAndHarm() const;
    virtual void canBeAffected(int) const;
    virtual void canBeAffected(MobEffectInstance const&) const;
    virtual void canBeAffectedByArrow(MobEffectInstance const&) const;
    virtual void onEffectAdded(MobEffectInstance&);
    virtual void onEffectUpdated(MobEffectInstance const&);
    virtual void onEffectRemoved(MobEffectInstance&);
    virtual void getAnimationComponent();
    virtual void openContainerComponent(Player&);
    virtual void swing();
    virtual void useItem(ItemStackBase&, ItemUseMethod, bool);
    virtual void hasOutputSignal(unsigned char) const;
    virtual void getOutputSignal() const;
    virtual void getDebugText(std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >&);
    virtual void getMapDecorationRotation() const;
    virtual void getRiderYRotation(Actor const&) const;
    virtual void getYHeadRot() const;
    virtual void isWorldBuilder();
    virtual void isCreative() const;
    virtual void isAdventure() const;
    virtual void add(ItemStack&);
    virtual void drop(ItemStack const&, bool);
    virtual void getInteraction(Player&, ActorInteraction&, Vec3 const&);
    virtual void canDestroyBlock(Block const&) const;
    virtual void setAuxValue(int);
    virtual void setSize(float, float);
    virtual void getLifeSpan() const;
    virtual void onOrphan();
    virtual void wobble();
    virtual void wasHurt();
    virtual void startSpinAttack();
    virtual void stopSpinAttack();
    virtual void setDamageNearbyMobs(bool);
    virtual void renderDebugServerState(Options const&);
    virtual void reloadLootTable();
    virtual void reloadLootTable(EquipmentTableDefinition const&);
    virtual void getDeletionDelayTimeSeconds() const;
    virtual void kill();
    virtual void die(ActorDamageSource const&);
    virtual void shouldTick() const;
    virtual void createMovementProxy();
    virtual void updateEntitySpecificMolangVariables(RenderParams&);
    virtual void shouldTryMakeStepSound();
    virtual void getNextStep(float);
    virtual void canMakeStepSound() const;
    virtual void outOfWorld();
    virtual void _hurt(ActorDamageSource const&, int, bool, bool);
    virtual void markHurt();
    virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper&);
    virtual void addAdditionalSaveData(CompoundTag&);
    virtual void _playStepSound(BlockPos const&, Block const&);
    virtual void _playFlySound(BlockPos const&, Block const&);
    virtual void _makeFlySound() const;
    virtual void checkInsideBlocks(float);
    virtual void pushOutOfBlocks(Vec3 const&);
    virtual void updateWaterState();
    virtual void doWaterSplashEffect();
    virtual void spawnTrailBubbles();
    virtual void updateInsideBlock();
    virtual void getLootTable();
    virtual void getDefaultLootTable();
    virtual void _removeRider(ActorUniqueID const&, bool, bool, bool);
    virtual void _onSizeUpdated();
    virtual void _doAutoAttackOnTouch(Actor&);
public:
    //Methods
    Actor(ActorDefinitionGroup*, ActorDefinitionIdentifier const&);
    Actor(Level&);
    //void tryGetActorFromContext(WeakRefT<EntityRefTraits>);
    void isAutoSendEnabled() const;
    void isBreakingObstruction() const;
    void getEffect(std::__ndk1::vector<MobEffectInstance, std::__ndk1::allocator<MobEffectInstance> > const&, MobEffect const&);
    void getRiderIndex(Actor const&) const;
    void setDancing(bool);
    void healEffects(int);
    void getColor() const;
    void isInClouds() const;
    void hasUniqueID() const;
    void getEntityTerrainInterlockData();
    void sendMotionToServer();
    void getHurtDir() const;
    void enableAutoSendPosRot(bool);
    void removePersistingTrade();
    void setEnchanted(bool);
    void getMarkVariant() const;
    void hasDimension() const;
    void wasLastHitByPlayer();
    void _getBlockWhenClimbing() const;
    void doEnchantDamageEffects(Mob&, Mob&);
    void hasSaddle() const;
    void isDelayedAttacking() const;
    void setStatusFlag(ActorFlags, bool);
    void canBeginOrContinueClimbingLadder() const;
    void sendActorDefinitionEventTriggered(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    void setUniqueID(ActorUniqueID);
    void getStructuralIntegrity() const;
    void getLevel() const;
    void setCameraDistance(float);
    void distanceSqrToBlockPosCenter(BlockPos const&) const;
    void _setHeightOffset(float);
    void hasTags() const;
    void getNextActionEvent(ActionEvent&);
    void setDoorOpener(bool);
    void initParams(RenderParams&);
    void setColor2(PaletteColor);
    void hasType(ActorType) const;
    void removeEffectNoUpdate(int);
    void isInSnow() const;
    void getBlockPosCurrentlyStandingOn(Actor*) const;
    void canMate(Actor const&) const;
    void setEquipFromPacket(UpdateEquipPacket const&);
    void getEffect(MobEffect const&) const;
    void hasTickingArea() const;
    void getActiveEffectCount(std::__ndk1::vector<MobEffectInstance, std::__ndk1::allocator<MobEffectInstance> > const&);
    void setStatusFlag(SynchedActorData&, ActorFlags, bool);
    void updateMolangVariables(RenderParams&);
    void getIsOnScreen() const;
    void getPlayerOwner() const;
    void spawnTamingParticles(bool);
    void getRenderLeashHolder();
    void isOverScaffolding() const;
    void getRuntimePredictionData() const;
    void shouldOrphan(BlockSource&);
    void initParams(VariantParameterList&);
    void setTradingPlayer(Player*);
    void isPredictedMovementEnabled() const;
    void buildForward() const;
    void getEntityData() const;
    void addDefinitionGroup(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    void _setupServerAnimationComponent();
    void isInRain() const;
    void setWASDControlled(bool);
    void _refreshAABB();
    void hasPriorityAmmunition() const;
    void getHurtColor() const;
    void hasRuntimeID() const;
    void getVariant() const;
    void isRiding(Actor*) const;
    void getStatusFlag(ActorFlags) const;
    void isChested() const;
    void isStackable() const;
    void isRider(Actor const&) const;
    void _setLevelPtr(Level*);
    void initEntity(EntityRegistryOwned&);
    void setPosPrev(Vec3 const&);
    void setResting(bool);
    void loadEntityFlags(CompoundTag const&, DataLoadHelper&);
    void spawnDustParticles(int);
    void getHealth() const;
    void setAABBDim(Vec2 const&);
    void setPreviousPosRot(Vec3 const&, Vec2 const&);
    void addPredictionMotionData(SetActorMotionPacket const&);
    void getControllingSeat();
    void isInsidePortal() const;
    void _determineCanPickupItems() const;
    void hasTeleported() const;
    void moveRelative(float, float, float, float);
    void isRider(ActorUniqueID const&) const;
    void getCurrentSwimAmount() const;
    void _playMovementSound(bool);
    void getRegion() const;
    void _getPredictedMovementComponent() const;
    void isTame() const;
    void moveBBs(Vec3 const&);
    void _getPredictedMovementComponentNonConst();
    void getMaxHealth() const;
    void getPersistingTradeOffers();
    void serverInitItemStackIds();
    void getHandContainer();
    void hasSubBBIn(MaterialType) const;
    void isLeashed() const;
    void setMoving(bool);
    void hasTotemEquipped() const;
    void getViewVector2(float) const;
    void removeAllRiders(bool, bool);
    void getActiveEffectCount() const;
    void setUpdateBonesAndEffects(bool);
    void updateInvisibilityStatus();
    void setAutonomous(bool);
    void isPersistent() const;
    void removeEntity();
    void setCollidableMob(bool);
    void getActorIdentifier() const;
    void getAmbientSoundEvent() const;
    void setSeatDescription(Vec3 const&, SeatDescription const&);
    void getTargetId();
    void spawnEatParticles(ItemStack const&, int);
    void hasFishingHook() const;
    void setGlobal(bool);
    void getPersistingTradeRiches();
    void lovePartnerId() const;
    void operator==(Actor&);
    void getFirstRider() const;
    void getRideRuntimeID() const;
    void _initializeLeashRopeSystem();
    void tryGetWeakEntity() const;
    void _setDimension(Dimension&);
    void getChainedDamageEffects() const;
    void isPacified() const;
    void distanceTo(Actor const&) const;
    void canCurrentlySwim() const;
    void hasFamily(HashedString const&) const;
    void setChainedDamageEffects(bool);
    void hasPlayerRider() const;
    void _spawnTreasureHuntingParticles();
    void hasAttributeBuff(AttributeBuffType) const;
    void checkEntityOnewayCollision(BlockSource&, BlockPos const&);
    void isClientSide() const;
    void playSound(LevelSoundEvent, Vec3 const&, int);
    void isControlledByLocalInstance() const;
    void setColor(PaletteColor);
    void isClimbing() const;
    void getRotation() const;
    void setHurtTime(int);
    void hasEffect(MobEffect const&) const;
    void getInterpolatedPosition(float) const;
    void migrateUniqueID(ActorUniqueID);
    void setSkinID(int);
    void shouldUpdateEffects() const;
    void getAttributes();
    void _setPosPrev(Vec3 const&);
    void hasAnyVisibleEffects() const;
    void tryGetEquippableSlotAllowedItems(int) const;
    void _spawnPukeParticles();
    void getSpeedInMetersPerSecond() const;
    void saveLinks() const;
    void setStrengthMax(int);
    void getDamageNearbyMobs() const;
    void getEntityData();
    void setLayingDown(bool);
    void serializationSetHealth(int);
    void _setAABBDim(Vec2 const&);
    void _sendDirtyActorData();
    void tickBlockDamage();
    void tickPredictedMovementComponent();
    void removeEffect(int);
    void setClimbing(bool);
    void onChunkDiscarded();
    void setTempted(bool);
    void isOrphan() const;
    void dropTowards(ItemStack const&, Vec3);
    void _getAABBShapeComponentNonConst();
    void isTrading() const;
    void inDownwardFlowingLiquid() const;
    void shouldUpdateBonesAndEffects() const;
    void getJumpDuration() const;
    void isScared() const;
    void getRandom() const;
    void getMolangVariables();
    void getFirstAvailableSeatPos(Actor&, Vec3&) const;
    void getRenderParams();
    void isSitting() const;
    void isRegionValid() const;
    void resetAllPredictionHistory();
    void setPosDirectLegacy(Vec3 const&);
    void isBaby() const;
    void isIgnited() const;
    void fetchFishingHook();
    void calcCenterPos() const;
    void setLimitedLife(int);
    void onOnewayCollision(AABB const&);
    void calculateAttackDamage(Actor&);
    void setStrength(int);
    void getTags() const;
    void celebrateHunt(int, bool);
    void setInvisible(bool);
    void setFishingHookID(ActorUniqueID);
    void hurt(ActorDamageSource const&, int, bool, bool);
    void setLeashHolder(ActorUniqueID);
    void getInitializationMethod();
    void isType(ActorType) const;
    void _exitRide(Actor const&, float);
    void executeEvent(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, VariantParameterList const&);
    void isInWorld() const;
    void _damageSensorComponentHurt(int&, int, ActorDamageSource const&);
    void isInLove() const;
    void getLocator(HashedString const&);
    void _sendLinkPacket(ActorLink const&) const;
    void updateTickingData();
    void getTradingPlayer() const;
    void _manageRiders(BlockSource&);
    void isDoorBreaker() const;
    void clearFishingHookID();
    void isAutonomous() const;
    void isWASDControlled();
    void setScared(bool);
    void _move(IActorMovementProxy&, Vec3 const&);
    void _getTallestCollisionShape(AABB const&, AABB const&, Vec3 const&);
    void setActorRendererId(HashedString);
    void _reloadComponentItem(ItemStack&);
    void hasAnyEffects() const;
    void _convertOldSave(CompoundTag const&);
    void onClimbableBlock() const;
    void setAABB(AABB const&);
    void isRiding() const;
    void getAmbientSoundIntervalRange(float&) const;
    void spawnDeathParticles();
    void moveTo(Vec3 const&, Vec2 const&);
    void getMetadataId() const;
    void setOffersFromPacket(UpdateTradePacket const&);
    void isDoorOpener() const;
    void moveRelative(IActorMovementProxy&, float, float, float, float);
    void setBaseDefinition(ActorDefinitionIdentifier const&, bool, bool);
    void resetClientAnimations();
    void removeEffectParticles();
    void playSound(LevelSoundEvent, Vec3 const&, Block const&);
    void isSafeToSleepNear() const;
    void getTickingArea();
    void _serializeComponents(CompoundTag&);
    void positionAllRiders();
    void setBlockTarget(BlockPos const&);
    void hasPersistingTrade() const;
    void canClimb() const;
    void distanceTo(Vec3 const&) const;
    void onOnewayCollision(BlockPos);
    void _setArmorContainer(std::__ndk1::unique_ptr<SimpleContainer, std::__ndk1::default_delete<SimpleContainer> >);
    void pushBackActionEventToActionQueue(ActionEvent);
    //void _setNetherPortalData(AutomaticID<Dimension, int>, AutomaticID<Dimension, int>, int);
    void _setPos(Vec3 const&);
    void getTempted() const;
    void setBreakingObstruction(bool);
    void getActorToWorldTransform(float, bool, Vec3 const&) const;
    void getRide() const;
    void reload();
    void getStrength() const;
    void getOffhandSlot() const;
    void clearActionQueue();
    void addPredictionMotionData(MotionPredictionHintsPacket const&);
    void isAngry() const;
    void getRandomPointInAABB(Random&);
    void pickUpItem(ItemActor&);
    void isSwimmer() const;
    void canOpenContainer(Player&) const;
    void tryMoveChunks();
    void isPowered() const;
    void isSheared() const;
    void setCollidableMobNear(bool);
    void _randomHeartPos();
    void getCollidableMobNear();
    void setDoorBreaker(bool);
    void getColor2() const;
    void createUpdateEquipPacket(int);
    void addPredictionMoveData(AddActorPacket const&);
    void isWalker() const;
    void dropLeash(bool, bool);
    void getRegionConst() const;
    void setUpdateEffects(bool);
    void burn(int, bool);
    void _tryPlantWitherRose();
    void setTradeInterest(bool);
    void getHurtTime() const;
    void isCharged() const;
    void removeTag(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    void canFly() const;
    void getArmorContainer() const;
    void isInPrecipitation() const;
    void _getStateVectorComponentNonConst();
    void setCanClimb(bool);
    void getInterpolatedRotation(float) const;
    void getEconomyTradeableComponent() const;
    void removeAllEffects();
    void isOutOfControl() const;
    void testForCollidableMobs(BlockSource&, AABB const&, std::__ndk1::vector<AABB, std::__ndk1::allocator<AABB> >&);
    void setIsOnScreen(bool);
    void isSneaking() const;
    void onHoverableBlock() const;
    void setChanged();
    void _isValidBlockToTeleportOnto(Block const&, bool) const;
    void isDebugging() const;
    void _setActorTypeId(ActorType);
    void isRemoved() const;
    void getStateVectorComponent() const;
    void distanceToSqr(Actor const&) const;
    void getStateVectorComponentNonConst();
    void getTarget() const;
    void _updateOnewayCollisions(BlockSource&);
    void getHandContainer() const;
    void getPostTickPosDelta() const;
    void getCenter(float) const;
    void getBlockTarget() const;
    void updateInBubbleColumnState();
    void setStunned(bool);
    void getPortalEntranceAxis() const;
    void getArmorContainer();
    void pullInEntity(Actor&);
    void setVariant(int);
    void getTotalAirSupply() const;
    void getLevel();
    void spawnBalloonPopParticles();
    void hasLevel() const;
    void hasDefinitionGroup(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&) const;
    void shouldAddEntityToRenderQueue() const;
    void setMarkVariant(int);
    void isActionQueueEmpty() const;
    void addPredictionMoveData(MoveActorAbsoluteData const&);
    void isInThunderstorm() const;
    void useSaddle(ItemStackBase&, Player*);
    void isBribed() const;
    void pickUpItem(ItemActor&, int);
    void setRuntimeID(ActorRuntimeID);
    void getOwner() const;
    void getCanPickupItems() const;
    void refreshComponents();
    void saveEntityFlags(CompoundTag&);
    void tick(BlockSource&);
    void resetRegion();
    void isStanding() const;
    void getViewVector(float) const;
    void getSpatialNetworkData() const;
    void forEachLeashedActor(std::__ndk1::function<void (gsl::not_null<Actor*>)>);
    void getTradeInterest() const;
    void cacheComponentData();
    void setSwimmer(bool);
    void getUniqueID() const;
    void getStrengthMax() const;
    void isLayingDown() const;
    void teleportRidersTo(Vec3 const&, int, int);
    void setPowered(bool);
    void getRideRoot() const;
    void removeDefinitionGroup(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    void setStructuralIntegrity(int);
    void setControllingSeat(int);
    void transferTickingArea(Dimension&);
    void _updateComposition(bool);
    void getTradeOffers();
    void _defaultInitEquipmentDropChances();
    void setHurtDir(int);
    void getDimension() const;
    void getLeashHolder() const;
    void isDancing() const;
    void setInLove(Actor*);
    void hasTag(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&) const;
    void getOwnerId() const;
    void setCharged(bool);
    void createUpdateTradePacket(int);
    void setShakeTime(int);
    void addTag(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&);
    void updateDescription();
    void isInScaffolding() const;
    void consumeItem(ItemActor&, int);
    void getAABBShapeComponent() const;
    void hasCategory(ActorCategory) const;
    void getDimensionConst() const;
    void fetchNearbyActorsSorted(Vec3 const&, ActorType);
    void isInsideBorderBlock(float) const;
    void getSwimAmount(float) const;
    void getCollidableMob();
    void setCanFly(bool);
    void getSkinID() const;
    void getLinks() const;
    void getAllEffects() const;
    void setRegion(BlockSource&);
    void savePersistingTrade(std::__ndk1::unique_ptr<CompoundTag, std::__ndk1::default_delete<CompoundTag> >, int);
    void testForEntityStacking(BlockSource&, AABB const&, std::__ndk1::vector<AABB, std::__ndk1::allocator<AABB> >&);
    void _containsSneakCollisionShapes(IActorMovementProxy&, AABB const&);
    void hasRider() const;
    void setJumpDuration(int);
    void getAmbientSoundIntervalMin(float&) const;
    void _updateOwnerChunk();
    void isSwimming() const;
    void getAirSupply() const;
    void getCameraDistance();
    void addEffect(MobEffectInstance const&);
    void getRuntimeID() const;
    void isMoving() const;
    void getVerticalSpeedInMetersPerSecond() const;
    void deregisterTagsFromLevelCache();
    void _damageNearbyMobs();
    void buildDebugGroupInfo(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&) const;
    void distanceToSqr(Vec3 const&) const;
    void isTrusting() const;
    void setDelayedAttacking(bool);
    void isTickingEntity() const;
    void isGlobal() const;
    void setWalker(bool);
    void getShakeTime() const;
    void _setHandContainer(std::__ndk1::unique_ptr<SimpleContainer, std::__ndk1::default_delete<SimpleContainer> >);
    void _moveHitboxTo(Vec3 const&);
    void setPersistent();
    void getSpatialNetworkData();
    void setLastHitBB(Vec3 const&, Vec3 const&);
    void getRadius() const;
    void isResting() const;
    void getStatusFlag(SynchedActorData const&, ActorFlags);
    void updateBBFromDefinition();
    void setSaddle(bool);
    void _tryPlaceAt(Vec3 const&);
public:
    //Objects
    static Actor * MAX_BYTE_CHARGE_AMOUNT;
    static Actor * DEFAULT_MAX_DISTANCE_OPTIMIZATION;
    static Actor * DAMAGE_NEARBY_MOBS_DURATION;
    static Actor * DEFAULT_AMBIENT_SOUND_INTERVAL_RANGE;
    static Actor * DEFAULT_MAX_TICK_DELAY_OPTIMIZATION;
    static Actor * TOTAL_AIR_SUPPLY;
    static Actor * DEFAULT_AMBIENT_SOUND_INTERVAL;
    static Actor * RIDING_TAG;
};//Actor
// 
// fake区域
#define Extern(type, method, args...) extern type (*fake_##method)(args)
Extern(int, Actor_getRegion, Actor*);
Extern(bool, Actor_isSneaking, Actor*);
// fake_Actor_getRegion = ()dlsym(RTLD_DEFAULT, "_ZN4Item11setCategoryE20CreativeItemCategory");
#endif