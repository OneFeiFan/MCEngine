#pragma once
#ifndef EX_FAKE_ITEM_HPP
#define EX_FAKE_ITEM_HPP

#include <stdint.h>
#include <dlfcn.h>
#include "../mojang/CreativeItemCategory.h"
#include "../mojang/Item.h"
#include "Json_ValueFaker.hpp"
#include "BlockLegacyFaker.hpp"
#include "ItemStackBaseFaker.hpp"

// This header template file is generated by Disassembler.

class BlockItem : public Item{};
class BlockPos;
extern bool forBlock;
// fake区域
//#define Extern(type, method, args...) extern type (*fake_##method) (args)
extern short (*fake_Item_getId) (Item*);
extern char* (*fake_Item_getCommandName) (Item*);
extern void (*fake_Item_setCategory) (Item*, CreativeItemCategory);
extern bool (*fake_Item_isFood) (Item*);
extern void* (*fake_Item_addTag) (Item*, HashedString*);
extern void (*fake_Item_initClient) (Item*, Json::Value&, Json::Value&);
extern int (*fake_UseAnimationFromString) (std::string const&);
extern float (*fake_FoodSaturationFromString) (std::string const&);
extern int (*fake_Tier_getUses) (Item::Tier*);
extern int (*fake_Tier_getAttackDamageBonus) (Item::Tier*);
extern Item* (*fake_Item_setMaxDamage) (Item*, int);
extern Item* (*fake_Item_setMaxStackSize) (Item*, unsigned char);
extern Item* (*fake_Item_toBlockId) (Item*, short);
extern BlockLegacy* (*fake_Item_getLegacyBlock) (Item*);
extern bool (*fake_Item_isSeed) (Item*);
extern const char* (*fake_Item_getFullItemName) (Item*);

//_ZNK4Item14getLegacyBlockEv
//hook区
//#define Extern(type, method, args...) extern type (*base_##method) (args)
extern Item* (*base_Item_Item) (Item*, std::string const&, short);
extern void (*base_Item_setIcon) (Item*, std::string const&, short);
extern void* (*base_Item_addCreativeItem) (Item*, short);
extern void (*base_Item_useOn) (Item*, ItemStack*, Actor*, int, int, int, short, float, float, float);
extern void* (*base_Item_addTag) (Item*, HashedString*);
extern int (*base_Item_initServer) (Item*, Json::Value&);
extern void (*base_Item_initClient) (Item*, Json::Value&, Json::Value&);
extern bool (*base_BlockItem__useOn) (Item*, ItemStackBase&, float*, BlockPos const&, uint8_t, float, float, float);
extern bool (*base_Item_isSeed) (Item*);

extern Item* NC_Item_Item (Item*, std::string const&, short);
extern void NC_Item_setIcon (Item*, std::string const&, short);
extern void* NC_Item_addCreativeItem (Item*, short);
extern void NC_Item_useOn (Item*, ItemStack*, Actor*, int, int, int, short, float, float, float);
extern void* NC_Item_addTag (Item*, HashedString*);
extern int NC_Item_initServer (Item*, Json::Value&);
extern void NC_Item_initClient (Item*, Json::Value&, Json::Value&);
extern bool NC_BlockItem__useOn (Item*, ItemStackBase&, float*, BlockPos const&, uint8_t, float, float, float);
//_ZNK9BlockItem6_useOnER9ItemStackR5Actor8BlockPoshfff
//
#endif